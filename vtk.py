# Created by LDT on 26 April 2022
# This script contains functions to create and save vtk files, starting from the txt file containing the coarse mesh coordinates 

#!/usr/bin/env python3
import os
import numpy as np
import time
import pandas as pd 
from pathlib import Path

import sys
sys.path.append( '../BiV_Modelling_v2' ) # append path to the Fitting framework where the BiVFitting folder is located

from BiVFitting.BiventricularModel import BiventricularModel
from BiVFitting.GPDataSet import GPDataSet
from BiVFitting.surface_enum import Surface


def write_vtk_polydata(filename, vertices, **kwargs):
    """Writes mesh as .vtk file format for Paraview (Kitware (c)) visualisation software.
    ----------
    Author: LDT, modified from code given by Debbie Zhao
    ----------
    Input:
    ----------
    filename: str
        path to output file with .vtk extension
    vertices: ndarray
        numpy Nx3 array of the coordinates of the mesh vertices
    (OPTIONAL) faces: ndarray
        numpy Nx3 (triangular) or Nx4 (quadrilateral) array of the faces
    """
    faces = kwargs.get('faces', None)
    vertices = np.asarray(vertices)
    nv = vertices.shape[0]

    if faces is not None:
        nf = faces.shape[0]
        ns = faces.shape[1]

        with open(filename, 'w') as f:

            f.write('# vtk DataFile Version 4.2\n')
            f.write('Legacy vtk file generated by python\n')
            f.write('ASCII\n')
            f.write('DATASET POLYDATA\n')
            
            # write vertex data
            f.write('\nPOINTS %u float\n' % nv)
            for vertex in vertices:
                f.write('%f %f %f\n' % (vertex[0], vertex[1], vertex[2]))

            # write face (polygon) data
            f.write('\nPOLYGONS %u %u\n' % (nf, nf*(ns+1)))
            if ns == 3: # triangle
                [f.write('3 %u %u %u\n' % (face[0], face[1], face[2])) for face in faces]
            elif ns == 4:  # quadrangle
                [f.write('4 %u %u %u %u\n' % (face[0], face[1], face[2], face[3])) for face in faces]

    else:
        with open(filename, 'w') as f:

            f.write('# vtk DataFile Version 4.2\n')
            f.write('Legacy vtk file generated by python\n')
            f.write('ASCII\n')
            f.write('DATASET POLYDATA\n')
            
            # write vertex data
            f.write('\nPOINTS %u float\n' % nv)
            for vertex in vertices:
                f.write('%f %f %f\n' % (vertex[0], vertex[1], vertex[2]))


def SaveMeshVtk(folder):
    """
    ----------
    Author: LDT
    Date: 26 May 2022
    ----------
    Input: folder where coarse mesh data are saved in .txt format
    Output: Mesh series saved in vtk format. 
            A different mesh is created for each label so that they can be visualised separately in paraview.
    """
    case =  os.path.basename(os.path.normpath(folder))
    print('case', case)
    ModelData = [filename for filename in os.listdir(folder) if 'Model_Frame_' in filename]
    ModelData = sorted(ModelData)


    for file in ModelData:

        num = int((re.search('Frame_(\d+)', file)).group(1)) # Extract frame number 

        model_path = './model'

        shifting_model = BiventricularModel(model_path,os.path.join(folder, file ))
        fitted_nodes = (pd.read_csv(os.path.join(folder, file), sep=",", skiprows=0 , dtype = np.float64)).values
        shifting_model.update_control_mesh(fitted_nodes)
        
        #Extract data for LV endo
        faces_LVendo = shifting_model.get_surface_faces(Surface.LV_ENDOCARDIAL)
        x = np.array(shifting_model.et_pos[:, 0]).T
        y = np.array(shifting_model.et_pos[:, 1]).T
        z = np.array(shifting_model.et_pos[:, 2]).T
        data = np.vstack((x,y,z)).T
        write_vtk_polydata(os.path.join(folder, 'Mesh_LV_endo_Frame_'+ format(int(num), "03")+'.vtk'), data, faces = faces_LVendo)

        # RV free wall
        faces_RVFW = shifting_model.get_surface_faces(Surface.RV_FREEWALL)
        write_vtk_polydata(os.path.join(folder, 'Mesh_RV_FW_Frame_'+ format(int(num), "03")+'.vtk'), data, faces = faces_RVFW)

        # RV septum
        faces_RVseptum = shifting_model.get_surface_faces(Surface.RV_SEPTUM)
        write_vtk_polydata(os.path.join(folder, 'Mesh_RV_septum_Frame_'+ format(int(num), "03")+'.vtk'), data, faces = faces_RVseptum)

        # epicardium
        faces_epi= shifting_model.get_surface_faces(Surface.EPICARDIAL)
        write_vtk_polydata(os.path.join(folder, 'Mesh_epi_Frame_'+ format(int(num), "03")+'.vtk'), data, faces = faces_epi)
        


def SaveGPDataVtk(folder):
    """
    ----------
    Author: LDT
    Date: 26 May 2022
    ----------
    Input: folder where GPFile and SliceInfoFiles are saved in .txt format
    Output: Guide Points series saved in vtk format. 
            A different file is created for each label so that they can be visualised separately in paraview.

    """

    # building the GPDataset vtk files
    case =  os.path.basename(os.path.normpath(folder))
    filename = os.path.join(folder, 'GPFile_ldt.txt') 
    filenameInfo = os.path.join(folder, 'SliceInfoFile_ldt.txt')

    all_frames = pd.read_csv(filename, sep = '\t')
    key_frames  = np.unique([i[6] for i in all_frames.values])

    ED_dataset = GPDataSet(filename,filenameInfo, case, sampling = sampling, time_frame_number = int(key_frames[0]))
    result_ED = ED_dataset.sinclaire_slice_shifting( frame_num = key_frames[0]) 
    shift_ED = result_ED[0]
    pos_ED = result_ED[1]

    for num in np.unique([i[6] for i in all_frames.values]):

        num = int(num)
        print(case, 'Frame ', num)
        data_set = GPDataSet(filename,filenameInfo, case, 1, time_frame_number = num) #18 is ES (RV) (timeframe 0-49)
        data_set.apply_slice_shift(shift_ED, pos_ED)


        contours_to_plot = [ContourType.LAX_RA,
                                ContourType.SAX_RV_FREEWALL, ContourType.LAX_RV_FREEWALL,
                                ContourType.SAX_RV_SEPTUM, ContourType.LAX_RV_SEPTUM,
                                ContourType.SAX_LV_ENDOCARDIAL,
                                ContourType.SAX_LV_EPICARDIAL, ContourType.RV_INSERT,
                                ContourType.APEX_POINT, ContourType.MITRAL_VALVE,
                                ContourType.TRICUSPID_VALVE,
                                ContourType.SAX_RV_EPICARDIAL, ContourType.LAX_RV_EPICARDIAL,
                                ContourType.LAX_LV_ENDOCARDIAL, ContourType.LAX_LV_EPICARDIAL,
                                ContourType.LAX_RV_EPICARDIAL, ContourType.SAX_RV_OUTLET,
                                ContourType.AORTA_VALVE,ContourType.PULMONARY_VALVE
                                #ContourType.PULMONARY_PHANTOM, ContourType.TRICUSPID_PHANTOM,
                                #ContourType.AORTA_PHANTOM, ContourType.MITRAL_PHANTOM
                                ]
        
        contourlist = ['SAX_RV_FREEWALL','LAX_RV_FREEWALL','SAX_RV_SEPTUM', 'LAX_RV_SEPTUM',
                        'SAX_LV_ENDOCARDIAL','SAX_LV_EPICARDIAL','RV_INSERT',
                        'APEX_POINT', 'MITRAL_VALVE', 'TRICUSPID_VALVE', 'SAX_RV_EPICARDIAL',
                        'LAX_RV_EPICARDIAL','LAX_LV_ENDOCARDIAL', 'LAX_LV_EPICARDIAL','LAX_RV_EPICARDIAL', 
                        'SAX_RV_OUTLET','PULMONARY_PHANTOM', 'AORTA_VALVE', 'PULMONARY_VALVE'
                        ]

        # extract GPData for current frame
        GPDatafile = data_set.PlotDataSet(contours_to_plot)  

        for element in GPDatafile:
            label = element['name']

            for contour in contourlist:
                if label == contour:
                    x = np.array(element['x']).T
                    y = np.array(element['y']).T
                    z = np.array(element['z']).T
                    coords3D = np.vstack((x,y,z)).T

                    write_vtk_polydata(os.path.join((Path(folder).parent.absolute(
                        )).parent.absolute(), 'results/'+case+'/'+case+'_Contours_'+label+'_Frame_'+ format(
                        int(num), "03")+'.vtk'), coords3D)
          
        #write_vtk_mesh(os.path.join((Path(folder).parent.absolute(
        #)).parent.absolute(), 'results/'+case+'/Gpdata_Frame_'+ format(int(num), "03")+'.vtk'), GpDatafile)
            



if __name__ == '__main__':

    
    startLDT = time.time()
    
    #main_path = '.'          ### folder in use
    main_path = 'C:/Users/ldt18/Desktop/Dev_BioBank'
    cases_folder = os.path.join(main_path, './results')
    cases_list = [os.path.join(cases_folder, batch) for batch in os.listdir(cases_folder) ]


    GPdata_folder = os.path.join(main_path, './test_data')
    test_cases_list = [os.path.join(GPdata_folder, batch) for batch in os.listdir(GPdata_folder)]
    VTK_points = [ SaveGPDataVtk(folder) for folder in test_cases_list]  
    VTK_meshes = [ SaveMeshVtk(folder) for folder in test_cases_list]  
    print('TOTAL TIME: ', time.time()-startLDT)

